<?xml version="1.0" encoding="UTF-8"?><testsuite name="nosetests" tests="501" errors="3" failures="9" skip="0"><testcase classname="testcases.bar_test.BarsTestCase" name="testBasic" time="0.001"></testcase><testcase classname="testcases.bar_test.BarsTestCase" name="testEmptyDict" time="0.000"></testcase><testcase classname="testcases.bar_test.BarsTestCase" name="testInvalidDateTimes" time="0.000"></testcase><testcase classname="testcases.bar_test.BasicBarTestCase" name="testGetPrice" time="0.000"></testcase><testcase classname="testcases.bar_test.BasicBarTestCase" name="testInvalidConstruction" time="0.001"></testcase><testcase classname="testcases.bar_test.BasicBarTestCase" name="testNoAdjClose" time="0.001"></testcase><testcase classname="testcases.bar_test.BasicBarTestCase" name="testPickle" time="0.000"></testcase><testcase classname="testcases.bar_test.BasicBarTestCase" name="testTypicalPrice" time="0.001"></testcase><testcase classname="testcases.barfeed_test.CommonTestCase" name="testSanitize" time="0.001"></testcase><testcase classname="testcases.barfeed_test.OptimizerBarFeedTestCase" name="testBaseBarFeed" time="0.000"></testcase><testcase classname="testcases.barfeed_test.OptimizerBarFeedTestCase" name="testBaseBarFeedNoAdjClose" time="0.001"></testcase><testcase classname="testcases.barfeed_test.OptimizerBarFeedTestCase" name="testDateTimesNotInOrder" time="0.002"></testcase><testcase classname="testcases.barfeed_test.OptimizerBarFeedTestCase" name="testEmtpy" time="0.000"></testcase><testcase classname="testcases.bitstamp_test.BacktestingTestCase" name="testBitcoinChartsFeed" time="1.466"></testcase><testcase classname="testcases.bitstamp_test.BacktestingTestCase" name="testMinTrade" time="0.189"></testcase><testcase classname="testcases.bitstamp_test.InstrumentTraitsTestCase" name="testInstrumentTraits" time="0.001"></testcase><testcase classname="testcases.bitstamp_test.LiveTradingTestCase" name="testBuyAndSell" time="0.001"><error type="exceptions.TypeError" message="Can't instantiate abstract class TestingLiveBroker with abstract methods createOptionLimitOrder, createOptionOrder, createOptionStopLimitOrder, createOptionStopOrder"><![CDATA[Traceback (most recent call last):
  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\bitstamp_test.py", line 601, in testBuyAndSell
    brk = TestingLiveBroker(None, None, None)
TypeError: Can't instantiate abstract class TestingLiveBroker with abstract methods createOptionLimitOrder, createOptionOrder, createOptionStopLimitOrder, createOptionStopOrder
]]></error></testcase><testcase classname="testcases.bitstamp_test.LiveTradingTestCase" name="testCancelOrder" time="0.000"><error type="exceptions.TypeError" message="Can't instantiate abstract class TestingLiveBroker with abstract methods createOptionLimitOrder, createOptionOrder, createOptionStopLimitOrder, createOptionStopOrder"><![CDATA[Traceback (most recent call last):
  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\bitstamp_test.py", line 559, in testCancelOrder
    brk = TestingLiveBroker(None, None, None)
TypeError: Can't instantiate abstract class TestingLiveBroker with abstract methods createOptionLimitOrder, createOptionOrder, createOptionStopLimitOrder, createOptionStopOrder
]]></error></testcase><testcase classname="testcases.bitstamp_test.LiveTradingTestCase" name="testMapUserTransactionsToOrderEvents" time="0.001"><error type="exceptions.TypeError" message="Can't instantiate abstract class TestingLiveBroker with abstract methods createOptionLimitOrder, createOptionOrder, createOptionStopLimitOrder, createOptionStopOrder"><![CDATA[Traceback (most recent call last):
  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\bitstamp_test.py", line 521, in testMapUserTransactionsToOrderEvents
    brk = TestingLiveBroker(None, None, None)
TypeError: Can't instantiate abstract class TestingLiveBroker with abstract methods createOptionLimitOrder, createOptionOrder, createOptionStopLimitOrder, createOptionStopOrder
]]></error></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testBuyAndSellWithPartialFill1" time="0.013"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testBuyAndSellWithPartialFill2" time="0.012"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testBuyWithPartialFill" time="0.012"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testBuyWithoutCash" time="0.018"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testInvalidOrders" time="0.000"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testRanOutOfCash" time="0.013"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testRanOutOfCoins" time="0.012"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testRoundingBugWithTrades" time="0.014"></testcase><testcase classname="testcases.bitstamp_test.PaperTradingTestCase" name="testSellWithoutBTC" time="0.013"></testcase><testcase classname="testcases.bitstamp_test.WebSocketTestCase" name="testBarFeed" time="23.301"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testCancelationEvent" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testGetActiveOrders" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testOneCancelsAnother" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testPartialFillAndCancel" time="0.000"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testRegressionGetActiveOrders" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testSkipOrderSubmittedDuringEvent" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testVolumeLimitMinuteBars" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testVolumeLimitPerBar1" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testVolumeLimitPerBar2" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.BrokerTestCase" name="testVolumeLimitTradeBars" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.CommissionTestCase" name="testFixedPerTrade" time="0.000"></testcase><testcase classname="testcases.broker_backtesting_test.CommissionTestCase" name="testNoCommission" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.CommissionTestCase" name="testTradePercentage" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.LimitOrderTestCase" name="testBuyAndSell_GappingBars" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.LimitOrderTestCase" name="testBuyAndSell_GetBetterPrice" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.LimitOrderTestCase" name="testBuyAndSell_HitTargetPrice" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.LimitOrderTestCase" name="testBuySellPartial" time="0.007"></testcase><testcase classname="testcases.broker_backtesting_test.LimitOrderTestCase" name="testBuy_GTC" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.LimitOrderTestCase" name="testFailToBuy" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testBuyAndSell" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testBuyAndSellInTwoSteps" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testBuyPartialWithEightDecimals" time="0.004"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testBuyPartialWithTwoDecimals" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testBuySellPartial" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testBuyWithCommission" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testBuy_GTC" time="0.004"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testCancel" time="0.000"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testDailyMarketOnClose" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testFailToBuy" time="0.004"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testFixedPerTradeWithPartialFills" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testGetPositions" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testIntradayMarketOnClose" time="0.000"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testPortfolioValue" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testSellShortWithCommission" time="0.000"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testSellShort_1" time="0.003"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testSellShort_2" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testSellShort_3" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.MarketOrderTestCase" name="testTradePercentageWithPartialFills" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testBuySellPartial_ActivateAndFill" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testBuySellPartial_ActivateAndThenFill" time="0.009"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testFillLimit" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testFillOpen" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testFillOpen_GappingBars" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testHitStopAndLimit" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testInvertedPrices_FillLimit" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testInvertedPrices_FillOpen" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testInvertedPrices_FillOpen_GappingBars" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testInvertedPrices_HitStopAndLimit" time="0.001"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testRegressionBarGapsAboveStop" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopLimitOrderTestCase" name="testStopHitWithoutVolume" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopOrderTestCase" name="testBuySellPartial_ActivateAndFill" time="0.006"></testcase><testcase classname="testcases.broker_backtesting_test.StopOrderTestCase" name="testBuySellPartial_ActivateAndThenFill" time="0.003"></testcase><testcase classname="testcases.broker_backtesting_test.StopOrderTestCase" name="testLongPosStopLoss" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopOrderTestCase" name="testLongPosStopLoss_GappingBars" time="0.000"></testcase><testcase classname="testcases.broker_backtesting_test.StopOrderTestCase" name="testShortPosStopLoss" time="0.006"></testcase><testcase classname="testcases.broker_backtesting_test.StopOrderTestCase" name="testShortPosStopLoss_GappingBars" time="0.002"></testcase><testcase classname="testcases.broker_backtesting_test.StopOrderTestCase" name="testStopHitWithoutVolume" time="0.001"></testcase><testcase classname="testcases.broker_test.OrderTestCase" name="testCompleteFill" time="0.001"></testcase><testcase classname="testcases.broker_test.OrderTestCase" name="testCompleteFillInvalidSize" time="0.000"></testcase><testcase classname="testcases.broker_test.OrderTestCase" name="testPartialFill" time="0.001"></testcase><testcase classname="testcases.btcharts_test.TestCase" name="testLoadFilterFrom" time="0.204"></testcase><testcase classname="testcases.btcharts_test.TestCase" name="testLoadFilterFromAndTo" time="0.199"></testcase><testcase classname="testcases.btcharts_test.TestCase" name="testLoadNoFilter" time="1.114"></testcase><testcase classname="testcases.csvfeed_test.TestCase" name="testBaseFeedInterface" time="0.200"></testcase><testcase classname="testcases.csvfeed_test.TestCase" name="testFeedWithBars" time="0.038"></testcase><testcase classname="testcases.csvfeed_test.TestCase" name="testFeedWithQuandl" time="0.185"></testcase><testcase classname="testcases.csvfeed_test.TestCase" name="testReset" time="0.042"></testcase><testcase classname="testcases.dataseries_test.TestBarDataSeries" name="testAppendInvalidDatetime" time="0.002"></testcase><testcase classname="testcases.dataseries_test.TestBarDataSeries" name="testDateTimes" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestBarDataSeries" name="testEmpty" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestBarDataSeries" name="testNestedDataSeries" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestBarDataSeries" name="testNonEmpty" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestBarDataSeries" name="testSeqLikeOps" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testBounded" time="0.000"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testBoundedSources" time="0.004"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testFullyAligned" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testFullyAligned_Recursive" time="0.002"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testIncremental" time="0.002"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testIncremental_Recursive" time="0.002"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testNotAligned" time="0.000"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testNotAligned_Recursive" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testPartiallyAligned" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestDateAlignedDataSeries" name="testPartiallyAligned_Recursive" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestSequenceDataSeries" name="testBounded" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestSequenceDataSeries" name="testEmpty" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestSequenceDataSeries" name="testNonEmpty" time="0.000"></testcase><testcase classname="testcases.dataseries_test.TestSequenceDataSeries" name="testResize1" time="0.000"></testcase><testcase classname="testcases.dataseries_test.TestSequenceDataSeries" name="testResize2" time="0.001"></testcase><testcase classname="testcases.dataseries_test.TestSequenceDataSeries" name="testSeqLikeOps" time="0.016"></testcase><testcase classname="testcases.dataseries_test.TestUpdatedDefaultMaxLen" name="testMaxLen" time="0.029"></testcase><testcase classname="testcases.dbfeed_test.SQLiteFeedTestCase" name="testBaseFeedInterface" time="11.635"></testcase><testcase classname="testcases.dbfeed_test.SQLiteFeedTestCase" name="testBounded" time="9.974"></testcase><testcase classname="testcases.dbfeed_test.SQLiteFeedTestCase" name="testLoadDailyBars" time="10.135"></testcase><testcase classname="testcases.doc_test.BitcoinChartsTestCase" name="testExample1" time="18.126"></testcase><testcase classname="testcases.doc_test.BitcoinChartsTestCase" name="testExample2" time="1.717"></testcase><testcase classname="testcases.doc_test.CompInvTestCase" name="testCompInv_1" time="1.107"><failure type="exceptions.AssertionError" message="False is not true&#10;    'False is not true' = self._formatMessage('False is not true', &quot;%s is not true&quot; % safe_repr(False))&#10;&gt;&gt;  raise self.failureException('False is not true')&#10;    "><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\doc_test.py", line 107, in testCompInv_1
    self.assertTrue(res.exit_ok())
  File "C:\Anaconda2\lib\unittest\case.py", line 422, in assertTrue
    raise self.failureException(msg)
False is not true
    'False is not true' = self._formatMessage('False is not true', "%s is not true" % safe_repr(False))
>>  raise self.failureException('False is not true')
    ]]></failure></testcase><testcase classname="testcases.doc_test.DocCodeTest" name="testCSVFeed" time="0.477"></testcase><testcase classname="testcases.doc_test.DocCodeTest" name="testTutorial1" time="0.075"><failure type="exceptions.AssertionError" message="Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...&#10;&#10;First differing element 0:&#10;'2000-01-03 00:00:00 strategy [INFO] 118.12'&#10;'Traceback (most recent call last):'&#10;&#10;- ['2000-01-03 00:00:00 strategy [INFO] 118.12',&#10;-  '2000-01-04 00:00:00 strategy [INFO] 107.69',&#10;-  '2000-01-05 00:00:00 strategy [INFO] 102.0']&#10;+ ['Traceback (most recent call last):',&#10;+  '  File &quot;samples\\tutorial-1.py&quot;, line 1, in &lt;module&gt;',&#10;+  '    from pyalgotrade import strategy']&#10;    &quot;&quot;&quot;Fail immediately, with the given message.&quot;&quot;&quot;&#10;&gt;&gt;  raise self.failureException('Lists differ: [\'2000-01-03 00:00:00 strategy... != [\'Traceback (most recent call ...\n\nFirst differing element 0:\n\'2000-01-03 00:00:00 strategy [INFO] 118.12\'\n\'Traceback (most recent call last):\'\n\n- [\'2000-01-03 00:00:00 strategy [INFO] 118.12\',\n-  \'2000-01-04 00:00:00 strategy [INFO] 107.69\',\n-  \'2000-01-05 00:00:00 strategy [INFO] 102.0\']\n+ [\'Traceback (most recent call last):\',\n+  \'  File &quot;samples\\\\tutorial-1.py&quot;, line 1, in &lt;module&gt;\',\n+  \'    from pyalgotrade import strategy\']')&#10;    "><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\doc_test.py", line 38, in testTutorial1
    res.get_output_lines(True)[:3]
  File "C:\Anaconda2\lib\unittest\case.py", line 513, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 742, in assertListEqual
    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
  File "C:\Anaconda2\lib\unittest\case.py", line 724, in assertSequenceEqual
    self.fail(msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 410, in fail
    raise self.failureException(msg)
Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...

First differing element 0:
'2000-01-03 00:00:00 strategy [INFO] 118.12'
'Traceback (most recent call last):'

- ['2000-01-03 00:00:00 strategy [INFO] 118.12',
-  '2000-01-04 00:00:00 strategy [INFO] 107.69',
-  '2000-01-05 00:00:00 strategy [INFO] 102.0']
+ ['Traceback (most recent call last):',
+  '  File "samples\\tutorial-1.py", line 1, in <module>',
+  '    from pyalgotrade import strategy']
    """Fail immediately, with the given message."""
>>  raise self.failureException('Lists differ: [\'2000-01-03 00:00:00 strategy... != [\'Traceback (most recent call ...\n\nFirst differing element 0:\n\'2000-01-03 00:00:00 strategy [INFO] 118.12\'\n\'Traceback (most recent call last):\'\n\n- [\'2000-01-03 00:00:00 strategy [INFO] 118.12\',\n-  \'2000-01-04 00:00:00 strategy [INFO] 107.69\',\n-  \'2000-01-05 00:00:00 strategy [INFO] 102.0\']\n+ [\'Traceback (most recent call last):\',\n+  \'  File "samples\\\\tutorial-1.py", line 1, in <module>\',\n+  \'    from pyalgotrade import strategy\']')
    ]]></failure></testcase><testcase classname="testcases.doc_test.DocCodeTest" name="testTutorial2" time="0.077"><failure type="exceptions.AssertionError" message="Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...&#10;&#10;First differing element 0:&#10;'2000-01-03 00:00:00 strategy [INFO] 118.12 None'&#10;'Traceback (most recent call last):'&#10;&#10;First list contains 11 additional elements.&#10;First extra element 4:&#10;'2000-01-07 00:00:00 strategy [INFO] 103.37 None'&#10;&#10;Diff is 1002 characters long. Set self.maxDiff to None to see it.&#10;    &quot;&quot;&quot;Fail immediately, with the given message.&quot;&quot;&quot;&#10;&gt;&gt;  raise self.failureException(&quot;Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...\n\nFirst differing element 0:\n'2000-01-03 00:00:00 strategy [INFO] 118.12 None'\n'Traceback (most recent call last):'\n\nFirst list contains 11 additional elements.\nFirst extra element 4:\n'2000-01-07 00:00:00 strategy [INFO] 103.37 None'\n\nDiff is 1002 characters long. Set self.maxDiff to None to see it.&quot;)&#10;    "><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\doc_test.py", line 51, in testTutorial2
    res.get_output_lines(True)[:15]
  File "C:\Anaconda2\lib\unittest\case.py", line 513, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 742, in assertListEqual
    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
  File "C:\Anaconda2\lib\unittest\case.py", line 724, in assertSequenceEqual
    self.fail(msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 410, in fail
    raise self.failureException(msg)
Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...

First differing element 0:
'2000-01-03 00:00:00 strategy [INFO] 118.12 None'
'Traceback (most recent call last):'

First list contains 11 additional elements.
First extra element 4:
'2000-01-07 00:00:00 strategy [INFO] 103.37 None'

Diff is 1002 characters long. Set self.maxDiff to None to see it.
    """Fail immediately, with the given message."""
>>  raise self.failureException("Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...\n\nFirst differing element 0:\n'2000-01-03 00:00:00 strategy [INFO] 118.12 None'\n'Traceback (most recent call last):'\n\nFirst list contains 11 additional elements.\nFirst extra element 4:\n'2000-01-07 00:00:00 strategy [INFO] 103.37 None'\n\nDiff is 1002 characters long. Set self.maxDiff to None to see it.")
    ]]></failure></testcase><testcase classname="testcases.doc_test.DocCodeTest" name="testTutorial3" time="0.065"><failure type="exceptions.AssertionError" message="Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...&#10;&#10;First differing element 0:&#10;'2000-01-03 00:00:00 strategy [INFO] 118.12 None None'&#10;'Traceback (most recent call last):'&#10;&#10;First list contains 26 additional elements.&#10;First extra element 4:&#10;'2000-01-07 00:00:00 strategy [INFO] 103.37 None None'&#10;&#10;Diff is 2097 characters long. Set self.maxDiff to None to see it.&#10;    &quot;&quot;&quot;Fail immediately, with the given message.&quot;&quot;&quot;&#10;&gt;&gt;  raise self.failureException(&quot;Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...\n\nFirst differing element 0:\n'2000-01-03 00:00:00 strategy [INFO] 118.12 None None'\n'Traceback (most recent call last):'\n\nFirst list contains 26 additional elements.\nFirst extra element 4:\n'2000-01-07 00:00:00 strategy [INFO] 103.37 None None'\n\nDiff is 2097 characters long. Set self.maxDiff to None to see it.&quot;)&#10;    "><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\doc_test.py", line 64, in testTutorial3
    res.get_output_lines(True)[:30]
  File "C:\Anaconda2\lib\unittest\case.py", line 513, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 742, in assertListEqual
    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
  File "C:\Anaconda2\lib\unittest\case.py", line 724, in assertSequenceEqual
    self.fail(msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 410, in fail
    raise self.failureException(msg)
Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...

First differing element 0:
'2000-01-03 00:00:00 strategy [INFO] 118.12 None None'
'Traceback (most recent call last):'

First list contains 26 additional elements.
First extra element 4:
'2000-01-07 00:00:00 strategy [INFO] 103.37 None None'

Diff is 2097 characters long. Set self.maxDiff to None to see it.
    """Fail immediately, with the given message."""
>>  raise self.failureException("Lists differ: ['2000-01-03 00:00:00 strategy... != ['Traceback (most recent call ...\n\nFirst differing element 0:\n'2000-01-03 00:00:00 strategy [INFO] 118.12 None None'\n'Traceback (most recent call last):'\n\nFirst list contains 26 additional elements.\nFirst extra element 4:\n'2000-01-07 00:00:00 strategy [INFO] 103.37 None None'\n\nDiff is 2097 characters long. Set self.maxDiff to None to see it.")
    ]]></failure></testcase><testcase classname="testcases.doc_test.DocCodeTest" name="testTutorial4" time="0.065"><failure type="exceptions.AssertionError" message="Lists differ: ['2000-01-26 00:00:00 strategy... != ['Traceback (most recent call ...&#10;&#10;First differing element 0:&#10;'2000-01-26 00:00:00 strategy [INFO] BUY at $27.26'&#10;'Traceback (most recent call last):'&#10;&#10;- ['2000-01-26 00:00:00 strategy [INFO] BUY at $27.26',&#10;-  '2000-01-28 00:00:00 strategy [INFO] SELL at $24.74',&#10;-  '2000-02-03 00:00:00 strategy [INFO] BUY at $26.60',&#10;-  '2000-02-22 00:00:00 strategy [INFO] SELL at $28.40']&#10;+ ['Traceback (most recent call last):',&#10;+  '  File &quot;samples\\tutorial-4.py&quot;, line 1, in &lt;module&gt;',&#10;+  '    from pyalgotrade import strategy',&#10;+  'ImportError: No module named pyalgotrade']&#10;    &quot;&quot;&quot;Fail immediately, with the given message.&quot;&quot;&quot;&#10;&gt;&gt;  raise self.failureException('Lists differ: [\'2000-01-26 00:00:00 strategy... != [\'Traceback (most recent call ...\n\nFirst differing element 0:\n\'2000-01-26 00:00:00 strategy [INFO] BUY at $27.26\'\n\'Traceback (most recent call last):\'\n\n- [\'2000-01-26 00:00:00 strategy [INFO] BUY at $27.26\',\n-  \'2000-01-28 00:00:00 strategy [INFO] SELL at $24.74\',\n-  \'2000-02-03 00:00:00 strategy [INFO] BUY at $26.60\',\n-  \'2000-02-22 00:00:00 strategy [INFO] SELL at $28.40\']\n+ [\'Traceback (most recent call last):\',\n+  \'  File &quot;samples\\\\tutorial-4.py&quot;, line 1, in &lt;module&gt;\',\n+  \'    from pyalgotrade import strategy\',\n+  \'ImportError: No module named pyalgotrade\']')&#10;    "><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\doc_test.py", line 78, in testTutorial4
    lines
  File "C:\Anaconda2\lib\unittest\case.py", line 513, in assertEqual
    assertion_func(first, second, msg=msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 742, in assertListEqual
    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
  File "C:\Anaconda2\lib\unittest\case.py", line 724, in assertSequenceEqual
    self.fail(msg)
  File "C:\Anaconda2\lib\unittest\case.py", line 410, in fail
    raise self.failureException(msg)
Lists differ: ['2000-01-26 00:00:00 strategy... != ['Traceback (most recent call ...

First differing element 0:
'2000-01-26 00:00:00 strategy [INFO] BUY at $27.26'
'Traceback (most recent call last):'

- ['2000-01-26 00:00:00 strategy [INFO] BUY at $27.26',
-  '2000-01-28 00:00:00 strategy [INFO] SELL at $24.74',
-  '2000-02-03 00:00:00 strategy [INFO] BUY at $26.60',
-  '2000-02-22 00:00:00 strategy [INFO] SELL at $28.40']
+ ['Traceback (most recent call last):',
+  '  File "samples\\tutorial-4.py", line 1, in <module>',
+  '    from pyalgotrade import strategy',
+  'ImportError: No module named pyalgotrade']
    """Fail immediately, with the given message."""
>>  raise self.failureException('Lists differ: [\'2000-01-26 00:00:00 strategy... != [\'Traceback (most recent call ...\n\nFirst differing element 0:\n\'2000-01-26 00:00:00 strategy [INFO] BUY at $27.26\'\n\'Traceback (most recent call last):\'\n\n- [\'2000-01-26 00:00:00 strategy [INFO] BUY at $27.26\',\n-  \'2000-01-28 00:00:00 strategy [INFO] SELL at $24.74\',\n-  \'2000-02-03 00:00:00 strategy [INFO] BUY at $26.60\',\n-  \'2000-02-22 00:00:00 strategy [INFO] SELL at $28.40\']\n+ [\'Traceback (most recent call last):\',\n+  \'  File "samples\\\\tutorial-4.py", line 1, in <module>\',\n+  \'    from pyalgotrade import strategy\',\n+  \'ImportError: No module named pyalgotrade\']')
    ]]></failure></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testBBands" time="0.698"></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testErnieChanGldVsGdx" time="8.465"></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testEventStudy" time="1.694"></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testMarketTiming" time="2.664"></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testQuandl" time="1.587"></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testRSI2" time="0.890"></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testSMACrossOver" time="0.827"></testcase><testcase classname="testcases.doc_test.SampleStratTestCase" name="testVWAPMomentum" time="1.617"></testcase><testcase classname="testcases.doc_test.StratAnalyzerTestCase" name="testSampleStrategyAnalyzer" time="0.056"><failure type="exceptions.AssertionError" message="False is not true&#10;    'False is not true' = self._formatMessage('False is not true', &quot;%s is not true&quot; % safe_repr(False))&#10;&gt;&gt;  raise self.failureException('False is not true')&#10;    "><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\doc_test.py", line 121, in testSampleStrategyAnalyzer
    self.assertTrue(res.exit_ok())
  File "C:\Anaconda2\lib\unittest\case.py", line 422, in assertTrue
    raise self.failureException(msg)
False is not true
    'False is not true' = self._formatMessage('False is not true', "%s is not true" % safe_repr(False))
>>  raise self.failureException('False is not true')
    ]]></failure></testcase><testcase classname="testcases.doc_test.TechnicalTestCase" name="testTechnical_1" time="0.091"><failure type="exceptions.AssertionError" message="False is not true&#10;    'False is not true' = self._formatMessage('False is not true', &quot;%s is not true&quot; % safe_repr(False))&#10;&gt;&gt;  raise self.failureException('False is not true')&#10;    "><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\doc_test.py", line 133, in testTechnical_1
    self.assertTrue(res.exit_ok())
  File "C:\Anaconda2\lib\unittest\case.py", line 422, in assertTrue
    raise self.failureException(msg)
False is not true
    'False is not true' = self._formatMessage('False is not true', "%s is not true" % safe_repr(False))
>>  raise self.failureException('False is not true')
    ]]></failure></testcase><testcase classname="testcases.drawdown_analyzer_test.AnalyzerTestCase" name="testIGE_Broker" time="0.280"></testcase><testcase classname="testcases.drawdown_analyzer_test.AnalyzerTestCase" name="testIGE_Broker2" time="0.282"></testcase><testcase classname="testcases.drawdown_analyzer_test.AnalyzerTestCase" name="testManual_1DD" time="0.001"></testcase><testcase classname="testcases.drawdown_analyzer_test.AnalyzerTestCase" name="testManual_2DD" time="0.001"></testcase><testcase classname="testcases.drawdown_analyzer_test.AnalyzerTestCase" name="testManual_NoDD" time="0.001"></testcase><testcase classname="testcases.drawdown_analyzer_test.AnalyzerTestCase" name="testNoTrades" time="0.451"></testcase><testcase classname="testcases.drawdown_analyzer_test.DDHelperCase" name="testDrawDown1" time="0.000"></testcase><testcase classname="testcases.drawdown_analyzer_test.DDHelperCase" name="testDrawDown2" time="0.001"></testcase><testcase classname="testcases.drawdown_analyzer_test.DDHelperCase" name="testNoDrawDown1" time="0.000"></testcase><testcase classname="testcases.drawdown_analyzer_test.DDHelperCase" name="testNoDrawDown2" time="0.000"></testcase><testcase classname="testcases.eventprofiler_test.EventProfilerTestCase" name="testEventsOnBoundary" time="0.055"></testcase><testcase classname="testcases.eventprofiler_test.EventProfilerTestCase" name="testNoEvents" time="0.065"></testcase><testcase classname="testcases.eventprofiler_test.EventProfilerTestCase" name="testOneEvent" time="0.055"></testcase><testcase classname="testcases.fill_strategy_test.DefaultStrategyTestCase" name="testVolumeLimitPerBar" time="0.000"></testcase><testcase classname="testcases.fill_strategy_test.FreeFunctionsTestCase" name="testLimitOrderTriggerBuy" time="0.001"></testcase><testcase classname="testcases.fill_strategy_test.FreeFunctionsTestCase" name="testLimitOrderTriggerSell" time="0.000"></testcase><testcase classname="testcases.fill_strategy_test.FreeFunctionsTestCase" name="testStopOrderTriggerBuy" time="0.001"></testcase><testcase classname="testcases.fill_strategy_test.FreeFunctionsTestCase" name="testStopOrderTriggerSell" time="0.000"></testcase><testcase classname="testcases.google_test.ToolsTestCase" name="testBuildDailyFeed" time="0.784"></testcase><testcase classname="testcases.google_test.ToolsTestCase" name="testDownloadAndParseDaily" time="0.139"></testcase><testcase classname="testcases.google_test.ToolsTestCase" name="testInvalidInstrument" time="2.295"></testcase><testcase classname="testcases.logger_test.TestCase" name="testBacktestingLog1" time="0.146"></testcase><testcase classname="testcases.logger_test.TestCase" name="testBacktestingLog2" time="0.143"></testcase><testcase classname="testcases.logger_test.TestCase" name="testNonBacktestingLog3" time="0.214"></testcase><testcase classname="testcases.memfeed_test.MemFeedTestCase" name="testBaseFeedInterface" time="0.005"></testcase><testcase classname="testcases.memfeed_test.MemFeedTestCase" name="testFeed" time="0.005"></testcase><testcase classname="testcases.memfeed_test.MemFeedTestCase" name="testReset" time="0.013"></testcase><testcase classname="testcases.multi_instrument_strategy_test.TestCase" name="testDifferentTimezones" time="0.575"></testcase><testcase classname="testcases.multi_instrument_strategy_test.TestCase" name="testDifferentTimezones_DBFeed" time="0.423"></testcase><testcase classname="testcases.multi_instrument_strategy_test.TestCase" name="testDifferentTimezones_DBFeed_LocalizedBars" time="0.398"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testBaseBarFeed" time="3.018"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testBaseFeedInterface" time="1.885"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testBounded" time="1.807"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testInvalidFrequency" time="0.001"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testLocalizeAndFilter" time="2.409"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testReset" time="2.899"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testWithIntegerTimezone" time="0.001"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testWithTimezone" time="1.727"></testcase><testcase classname="testcases.ninjatraderfeed_test.NinjaTraderTestCase" name="testWithoutTimezone" time="1.624"></testcase><testcase classname="testcases.observer_test.DispatcherTestCase" name="test1NrtFeed" time="0.001"></testcase><testcase classname="testcases.observer_test.DispatcherTestCase" name="test1RtFeed" time="0.000"></testcase><testcase classname="testcases.observer_test.DispatcherTestCase" name="test2Combined" time="0.000"></testcase><testcase classname="testcases.observer_test.DispatcherTestCase" name="test2NrtFeeds" time="0.001"></testcase><testcase classname="testcases.observer_test.DispatcherTestCase" name="test2RtFeeds" time="0.000"></testcase><testcase classname="testcases.observer_test.DispatcherTestCase" name="testDispatchOrder" time="0.000"></testcase><testcase classname="testcases.observer_test.DispatcherTestCase" name="testPriority" time="0.000"></testcase><testcase classname="testcases.observer_test.EventTestCase" name="testDuplicateHandlers" time="0.000"></testcase><testcase classname="testcases.observer_test.EventTestCase" name="testEmitOrder" time="0.000"></testcase><testcase classname="testcases.observer_test.EventTestCase" name="testReentrancy" time="0.001"></testcase><testcase classname="testcases.optimizer_testcase.OptimizerTestCase" name="testFailingStrategy" time="7.068"></testcase><testcase classname="testcases.optimizer_testcase.OptimizerTestCase" name="testLocal" time="8.205"></testcase><testcase classname="testcases.plotter_test.PlotterTestCase" name="testDownloadAndParseDaily" time="0.747"><system-err><![CDATA[C:\Users\charly\git\pyalgotrade\testcases\plotter_test.py:47: PyAlgoTradeDeprecationWarning: buildFigure will be deprecated in the next version. Use buildFigureAndSubplots.
  fig = plt.buildFigure()
]]></system-err></testcase><testcase classname="testcases.position_test.LimitPosTestCase" name="testEntryGTCExitNotGTC" time="0.037"></testcase><testcase classname="testcases.position_test.LimitPosTestCase" name="testExitCancelsEntry" time="0.038"></testcase><testcase classname="testcases.position_test.LimitPosTestCase" name="testExitOnEntryNotFilled" time="0.035"></testcase><testcase classname="testcases.position_test.LimitPosTestCase" name="testExitTwice" time="0.043"></testcase><testcase classname="testcases.position_test.LimitPosTestCase" name="testLong" time="0.036"></testcase><testcase classname="testcases.position_test.LimitPosTestCase" name="testShort" time="0.088"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testActiveOrdersAndSharesLong" time="0.037"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testCancelEntry" time="0.035"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testDoubleExitFails" time="0.043"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testEnterAndExit" time="0.053"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testEntryCanceled" time="0.034"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testExitEntryNotFilled" time="0.033"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testIsOpen_NotClosed" time="0.036"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testLongPosition" time="0.034"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testLongPositionAdjClose" time="0.037"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testLongPositionGTC" time="0.036"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testPartialFillGTC1" time="0.002"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testPartialFillGTC2" time="0.002"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testPartialFillGTC3" time="0.002"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testPartialFillGTC4" time="0.003"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testResubmitExit" time="0.036"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testUnrealized1" time="0.403"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testUnrealized2" time="0.041"></testcase><testcase classname="testcases.position_test.LongPosTestCase" name="testUnrealizedAdjusted" time="0.035"></testcase><testcase classname="testcases.position_test.ShortPosTestCase" name="testActiveOrdersAndSharesShort" time="0.037"></testcase><testcase classname="testcases.position_test.ShortPosTestCase" name="testShortPosition" time="0.035"></testcase><testcase classname="testcases.position_test.ShortPosTestCase" name="testShortPositionAdjClose" time="0.037"></testcase><testcase classname="testcases.position_test.ShortPosTestCase" name="testShortPositionExitCanceled" time="0.046"></testcase><testcase classname="testcases.position_test.ShortPosTestCase" name="testShortPositionExitCanceledAndReSubmitted" time="0.042"></testcase><testcase classname="testcases.position_test.ShortPosTestCase" name="testUnrealized" time="0.420"></testcase><testcase classname="testcases.position_test.StopLimitPosTestCase" name="testLong" time="0.036"></testcase><testcase classname="testcases.position_test.StopLimitPosTestCase" name="testShort" time="0.036"></testcase><testcase classname="testcases.position_test.StopPosTestCase" name="testLong" time="0.037"></testcase><testcase classname="testcases.position_test.StopPosTestCase" name="testPartialFillGTC1" time="0.002"></testcase><testcase classname="testcases.position_test.StopPosTestCase" name="testPartialFillGTC2" time="0.002"></testcase><testcase classname="testcases.position_test.StopPosTestCase" name="testPartialFillGTC3" time="0.002"></testcase><testcase classname="testcases.position_test.StopPosTestCase" name="testPartialFillGTC4" time="0.004"></testcase><testcase classname="testcases.position_test.StopPosTestCase" name="testShort" time="0.038"></testcase><testcase classname="testcases.pusher_test.TestCase" name="test_pusher" time="30.154"><failure type="exceptions.AssertionError" message="False is not true&#10;    'False is not true' = self._formatMessage('False is not true', &quot;%s is not true&quot; % safe_repr(False))&#10;&gt;&gt;  raise self.failureException('False is not true')&#10;    &#10;-------------------- &gt;&gt; begin captured logging &lt;&lt; --------------------&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;pusher: DEBUG: Sending pusher:ping.&#10;pusher: DEBUG: Received pusher:pong.&#10;--------------------- &gt;&gt; end captured logging &lt;&lt; ---------------------"><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\pusher_test.py", line 87, in test_pusher
    self.assertTrue(False)
  File "C:\Anaconda2\lib\unittest\case.py", line 422, in assertTrue
    raise self.failureException(msg)
'False is not true\n    \'False is not true\' = self._formatMessage(\'False is not true\', "%s is not true" % safe_repr(False))\n>>  raise self.failureException(\'False is not true\')\n    \n-------------------- >> begin captured logging << --------------------\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\npusher: DEBUG: Sending pusher:ping.\npusher: DEBUG: Received pusher:pong.\n--------------------- >> end captured logging << ---------------------']]></failure></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testBuildFeedDaily" time="0.437"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testBuildFeedWeekly" time="0.289"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testDownloadAndParseDaily" time="0.549"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testDownloadAndParseDailyNoAdjClose" time="0.342"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testDownloadAndParseDaily_UseAdjClose" time="0.516"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testDownloadAndParseWeekly" time="0.275"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testExtraColumns" time="0.335"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testInvalidFrequency" time="0.001"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testInvalidInstrument" time="0.358"></testcase><testcase classname="testcases.quandl_test.ToolsTestCase" name="testMapColumnNames" time="0.347"></testcase><testcase classname="testcases.resample_test.BarFeedTestCase" name="testResampledBarFeed" time="0.067"></testcase><testcase classname="testcases.resample_test.DataSeriesTestCase" name="testCheckNow" time="0.001"></testcase><testcase classname="testcases.resample_test.DataSeriesTestCase" name="testResample" time="0.001"></testcase><testcase classname="testcases.resample_test.DataSeriesTestCase" name="testResampleNinjaTraderDay" time="2.100"></testcase><testcase classname="testcases.resample_test.DataSeriesTestCase" name="testResampleNinjaTraderHour" time="2.244"></testcase><testcase classname="testcases.resample_test.DayRange" name="testLocalizedOk" time="0.181"></testcase><testcase classname="testcases.resample_test.DayRange" name="testOk" time="0.182"></testcase><testcase classname="testcases.resample_test.IntraDayRange" name="testFiveMinuteRange" time="0.002"></testcase><testcase classname="testcases.resample_test.IntraDayRange" name="testFiveMinuteRangeLocalized" time="0.001"></testcase><testcase classname="testcases.resample_test.IntraDayRange" name="testHourRange" time="0.008"></testcase><testcase classname="testcases.resample_test.IntraDayRange" name="testHourRangeLocalized" time="0.009"></testcase><testcase classname="testcases.resample_test.IntraDayRange" name="testMinuteRange" time="0.001"></testcase><testcase classname="testcases.resample_test.IntraDayRange" name="testMinuteRangeLocalized" time="0.000"></testcase><testcase classname="testcases.resample_test.MonthRange" name="test28Days" time="5.544"></testcase><testcase classname="testcases.resample_test.MonthRange" name="test31Days" time="5.922"></testcase><testcase classname="testcases.resample_test.MonthRange" name="testDecember" time="5.741"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testCumulativeReturn" time="0.058"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testFirstBar" time="0.047"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testGoogle2011" time="0.885"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testMultipleInstrumentsInterleaved" time="0.126"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testOneBarReturn" time="0.006"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testTwoBarReturns_CloseClose" time="0.006"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testTwoBarReturns_CloseOpen" time="0.012"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testTwoBarReturns_OpenClose" time="0.008"></testcase><testcase classname="testcases.returns_analyzer_test.AnalyzerTestCase" name="testTwoBarReturns_OpenOpen" time="0.007"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testBuyAndSellBreakEven" time="0.005"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testBuyAndSellBreakEvenWithCommision" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testBuyAndSellBreakEvenWithCommission" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testBuyAndSellInTwoTrades" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testBuyAndSellMultipleEvals" time="0.001"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testBuyAndSellWin" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testBuySellBuy" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testProfitReturnsAndCost" time="0.001"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testSellAndBuyMultipleEvals" time="0.001"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testSellAndBuyWin" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testSellBuySell" time="0.001"></testcase><testcase classname="testcases.returns_analyzer_test.PosTrackerTestCase" name="testSeparateAndCombined" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.TimeWeightedReturnsTestCase" name="testInvestopedia" time="0.004"></testcase><testcase classname="testcases.returns_analyzer_test.TimeWeightedReturnsTestCase" name="testNoUpdates" time="0.000"></testcase><testcase classname="testcases.returns_analyzer_test.TimeWeightedReturnsTestCase" name="testNullPortfolio" time="0.000"></testcase><testcase classname="testcases.sharpe_analyzer_test.SharpeRatioTestCase" name="testDateTimeDiffs" time="0.000"></testcase><testcase classname="testcases.sharpe_analyzer_test.SharpeRatioTestCase" name="testIGE_Broker" time="0.230"></testcase><testcase classname="testcases.sharpe_analyzer_test.SharpeRatioTestCase" name="testIGE_Broker2" time="0.240"></testcase><testcase classname="testcases.sharpe_analyzer_test.SharpeRatioTestCase" name="testIGE_BrokerWithCommission" time="0.227"></testcase><testcase classname="testcases.sharpe_analyzer_test.SharpeRatioTestCase" name="testIntraDay" time="1.717"></testcase><testcase classname="testcases.sharpe_analyzer_test.SharpeRatioTestCase" name="testNoTrades" time="0.225"></testcase><testcase classname="testcases.slippage_model_test.NoSlippageTestCase" name="test_buy_market_order" time="0.000"></testcase><testcase classname="testcases.slippage_model_test.NoSlippageTestCase" name="test_sell_market_order" time="0.000"></testcase><testcase classname="testcases.slippage_model_test.VolumeShareSlippageTestCase" name="test_buy_market_order" time="0.000"></testcase><testcase classname="testcases.slippage_model_test.VolumeShareSlippageTestCase" name="test_full_volume_used" time="0.000"></testcase><testcase classname="testcases.slippage_model_test.VolumeShareSlippageTestCase" name="test_sell_market_order" time="0.000"></testcase><testcase classname="testcases.smacrossover_strategy_test.TestSMACrossOver" name="testWithLimitOrder" time="0.058"></testcase><testcase classname="testcases.smacrossover_strategy_test.TestSMACrossOver" name="testWithMarketOrder" time="0.083"></testcase><testcase classname="testcases.strategy_test.BrokerOrderTestCase" name="testMarketOrder" time="0.058"></testcase><testcase classname="testcases.strategy_test.OptionalOverridesTestCase" name="testOnStartIdleFinish" time="0.053"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testLimitOrderBuy" time="0.054"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testLimitOrderSell" time="0.045"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testMarketOrderBuy" time="0.054"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testMarketOrderSell" time="0.038"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testOrder" time="0.035"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testStopLimitOrderBuy" time="0.035"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testStopLimitOrderSell" time="0.036"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testStopOrderBuy" time="0.034"></testcase><testcase classname="testcases.strategy_test.StrategyOrderTestCase" name="testStopOrderSell" time="0.035"></testcase><testcase classname="testcases.talib_test.TestCase" name="testAD" time="0.022"></testcase><testcase classname="testcases.talib_test.TestCase" name="testADOSC" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testADX" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testADXR" time="0.022"></testcase><testcase classname="testcases.talib_test.TestCase" name="testAPO" time="0.020"></testcase><testcase classname="testcases.talib_test.TestCase" name="testAROON" time="0.020"></testcase><testcase classname="testcases.talib_test.TestCase" name="testAROONOSC" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testATR" time="0.021"></testcase><testcase classname="testcases.talib_test.TestCase" name="testAVGPRICE" time="0.020"></testcase><testcase classname="testcases.talib_test.TestCase" name="testBBANDS" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testBETA" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testBOP" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testCCI" time="0.021"></testcase><testcase classname="testcases.talib_test.TestCase" name="testCMO" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testCORREL" time="0.022"></testcase><testcase classname="testcases.talib_test.TestCase" name="testDX" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testEMA" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testHT_DCPERIOD" time="0.003"></testcase><testcase classname="testcases.talib_test.TestCase" name="testHT_DCPHASE" time="0.004"></testcase><testcase classname="testcases.talib_test.TestCase" name="testHT_TRENDLINE" time="0.005"></testcase><testcase classname="testcases.talib_test.TestCase" name="testHT_TRENDMODE" time="0.001"></testcase><testcase classname="testcases.talib_test.TestCase" name="testKAMA" time="0.021"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMA" time="0.020"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMACD" time="0.022"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMACDEXT" time="0.017"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMAMA" time="0.002"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMAX" time="0.017"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMFI" time="0.022"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMIN" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMINUS_DI" time="0.020"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMINUS_DM" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testMOM" time="0.017"></testcase><testcase classname="testcases.talib_test.TestCase" name="testNATR" time="0.022"></testcase><testcase classname="testcases.talib_test.TestCase" name="testPLUS_DI" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testPLUS_DM" time="0.017"></testcase><testcase classname="testcases.talib_test.TestCase" name="testPPO" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testROC" time="0.021"></testcase><testcase classname="testcases.talib_test.TestCase" name="testROCR" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testROCR100" time="0.021"></testcase><testcase classname="testcases.talib_test.TestCase" name="testRSI" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testSAR" time="0.004"></testcase><testcase classname="testcases.talib_test.TestCase" name="testSMA" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testSTDDEV" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testSTOCH" time="0.020"></testcase><testcase classname="testcases.talib_test.TestCase" name="testSTOCHRSI" time="0.018"></testcase><testcase classname="testcases.talib_test.TestCase" name="testT3" time="0.017"></testcase><testcase classname="testcases.talib_test.TestCase" name="testTRANGE" time="0.025"></testcase><testcase classname="testcases.talib_test.TestCase" name="testTRIMA" time="0.017"></testcase><testcase classname="testcases.talib_test.TestCase" name="testTRIX" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testULTOSC" time="0.019"></testcase><testcase classname="testcases.talib_test.TestCase" name="testVAR" time="0.020"></testcase><testcase classname="testcases.talib_test.TestCase" name="testWILLR" time="0.017"></testcase><testcase classname="testcases.talib_test.TestCase" name="testWMA" time="0.017"></testcase><testcase classname="testcases.technical_atr_test.TestCase" name="testStockChartsATR" time="0.006"></testcase><testcase classname="testcases.technical_atr_test.TestCase" name="testStockChartsATRAdjusted" time="0.003"></testcase><testcase classname="testcases.technical_bollinger_test.TestCase" name="testStockChartsBollinger" time="0.006"></testcase><testcase classname="testcases.technical_bollinger_test.TestCase" name="testStockChartsBollinger_Bounded" time="0.004"></testcase><testcase classname="testcases.technical_cross_test.HelpersTestCase" name="test_compute_diff" time="0.001"></testcase><testcase classname="testcases.technical_cross_test.HelpersTestCase" name="test_get_stripped_left" time="0.000"></testcase><testcase classname="testcases.technical_cross_test.HelpersTestCase" name="test_get_stripped_right" time="0.001"></testcase><testcase classname="testcases.technical_cross_test.TestCase" name="testCrossAboveMany" time="0.004"></testcase><testcase classname="testcases.technical_cross_test.TestCase" name="testCrossAboveOnce" time="0.001"></testcase><testcase classname="testcases.technical_cross_test.TestCase" name="testCrossAboveWithSMA" time="0.008"></testcase><testcase classname="testcases.technical_cross_test.TestCase" name="testCrossBelowMany" time="0.003"></testcase><testcase classname="testcases.technical_cross_test.TestCase" name="testCrossBelowOnce" time="0.001"></testcase><testcase classname="testcases.technical_cross_test.TestCase" name="testWithLists" time="0.000"></testcase><testcase classname="testcases.technical_cumret_test.CumRetTestCase" name="testCumRet" time="0.000"></testcase><testcase classname="testcases.technical_highlow_test.HighLowTestCase" name="testHighLow" time="0.000"></testcase><testcase classname="testcases.technical_hurst_test.TestCase" name="testHurstExpFunMeanRev" time="0.011"></testcase><testcase classname="testcases.technical_hurst_test.TestCase" name="testHurstExpFunRandomWalk" time="0.008"></testcase><testcase classname="testcases.technical_hurst_test.TestCase" name="testHurstExpFunTrending" time="0.009"></testcase><testcase classname="testcases.technical_hurst_test.TestCase" name="testMeanRev" time="0.246"></testcase><testcase classname="testcases.technical_hurst_test.TestCase" name="testRandomWalk" time="0.240"></testcase><testcase classname="testcases.technical_hurst_test.TestCase" name="testTrending" time="0.237"></testcase><testcase classname="testcases.technical_linebreak_test.LineBreakTestCase" name="test2LineBreak" time="0.030"></testcase><testcase classname="testcases.technical_linebreak_test.LineBreakTestCase" name="test3LineBreak" time="0.029"></testcase><testcase classname="testcases.technical_linebreak_test.LineBreakTestCase" name="testLineBreakBounded" time="0.027"></testcase><testcase classname="testcases.technical_linreg_test.LeastSquaresRegressionTestCase" name="testLsreg1" time="0.002"></testcase><testcase classname="testcases.technical_linreg_test.LeastSquaresRegressionTestCase" name="testLsreg2" time="0.000"></testcase><testcase classname="testcases.technical_linreg_test.LeastSquaresRegressionTestCase" name="testLsreg3" time="0.001"></testcase><testcase classname="testcases.technical_linreg_test.LeastSquaresRegressionTestCase" name="testStraightLine" time="0.006"></testcase><testcase classname="testcases.technical_ma_test.EMATestCase" name="testBoundedFilter" time="0.001"></testcase><testcase classname="testcases.technical_ma_test.EMATestCase" name="testMaxRecursion" time="2.049"></testcase><testcase classname="testcases.technical_ma_test.EMATestCase" name="testStockChartsEMA" time="0.006"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testEventWindow" time="0.005"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testMultipleValues" time="0.001"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testMultipleValuesSkippingOne" time="0.003"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testNinjaTraderSMA" time="0.095"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testPeriod1" time="0.000"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testPeriod2" time="0.001"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testPeriod2_BoundedFilter" time="0.000"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testSeqLikeOps" time="0.018"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testStockChartsSMA" time="0.005"></testcase><testcase classname="testcases.technical_ma_test.SMATestCase" name="testStockChartsSMA_BoundedSeq" time="0.008"></testcase><testcase classname="testcases.technical_ma_test.WMATestCase" name="testPeriod1" time="0.000"></testcase><testcase classname="testcases.technical_ma_test.WMATestCase" name="testPeriod2_BoundedFilter" time="0.000"></testcase><testcase classname="testcases.technical_ma_test.WMATestCase" name="testPeriod2_BoundedSeq" time="0.000"></testcase><testcase classname="testcases.technical_macd_test.MACDTestCase" name="testMACD" time="0.002"></testcase><testcase classname="testcases.technical_ratio_test.TestCase" name="testBounded" time="0.004"></testcase><testcase classname="testcases.technical_ratio_test.TestCase" name="testNegativeValues" time="0.001"></testcase><testcase classname="testcases.technical_ratio_test.TestCase" name="testSimple" time="0.001"></testcase><testcase classname="testcases.technical_roc_test.ROCTestCase" name="testBounded" time="0.004"></testcase><testcase classname="testcases.technical_roc_test.ROCTestCase" name="testPeriod1" time="0.001"></testcase><testcase classname="testcases.technical_roc_test.ROCTestCase" name="testPeriod12" time="0.001"></testcase><testcase classname="testcases.technical_roc_test.ROCTestCase" name="testZeroes" time="0.000"></testcase><testcase classname="testcases.technical_rsi_test.TestCase" name="testAvgGainLoss" time="0.000"></testcase><testcase classname="testcases.technical_rsi_test.TestCase" name="testDateTimes" time="0.001"></testcase><testcase classname="testcases.technical_rsi_test.TestCase" name="testRSIFunc" time="0.000"></testcase><testcase classname="testcases.technical_rsi_test.TestCase" name="testRSI_Bounded" time="0.002"></testcase><testcase classname="testcases.technical_rsi_test.TestCase" name="testStockChartsRSI" time="0.007"></testcase><testcase classname="testcases.technical_stats_test.TestCase" name="testStdDev" time="0.001"></testcase><testcase classname="testcases.technical_stats_test.TestCase" name="testStdDev_1" time="0.000"></testcase><testcase classname="testcases.technical_stats_test.TestCase" name="testStdDev_Bounded" time="0.000"></testcase><testcase classname="testcases.technical_stats_test.TestCase" name="testZScore" time="0.002"></testcase><testcase classname="testcases.technical_stoch_test.TestCase" name="testShortPeriod" time="0.000"></testcase><testcase classname="testcases.technical_stoch_test.TestCase" name="testStockChartsStoch" time="0.007"></testcase><testcase classname="testcases.technical_stoch_test.TestCase" name="testStockChartsStoch_Bounded" time="0.005"></testcase><testcase classname="testcases.technical_stoch_test.TestCase" name="testZeroDivision" time="0.000"></testcase><testcase classname="testcases.technical_test.DataSeriesFilterTest" name="testInvalidPosNotCached" time="0.001"></testcase><testcase classname="testcases.technical_trend_test.SlopeTest" name="testSlope" time="0.003"></testcase><testcase classname="testcases.technical_trend_test.SlopeTest" name="testSlopeBounded" time="0.002"></testcase><testcase classname="testcases.technical_trend_test.TrendTest" name="testInvalidThreshold" time="0.004"></testcase><testcase classname="testcases.technical_trend_test.TrendTest" name="testTrend" time="0.003"></testcase><testcase classname="testcases.technical_trend_test.TrendTest" name="testTrendWithCustomThresholds" time="0.003"></testcase><testcase classname="testcases.technical_trend_test.TrendTest" name="testTrendWithCustomThresholds_Bounded" time="0.003"></testcase><testcase classname="testcases.technical_vwap_test.VWAPTestCase" name="testBounded" time="0.064"></testcase><testcase classname="testcases.technical_vwap_test.VWAPTestCase" name="testPeriod1_ClosingPrice" time="0.036"></testcase><testcase classname="testcases.technical_vwap_test.VWAPTestCase" name="testPeriod1_TypicalPrice" time="0.034"></testcase><testcase classname="testcases.technical_vwap_test.VWAPTestCase" name="testPeriod2_ClosingPrice" time="0.033"></testcase><testcase classname="testcases.technical_vwap_test.VWAPTestCase" name="testPeriod2_TypicalPrice" time="0.035"></testcase><testcase classname="testcases.technical_vwap_test.VWAPTestCase" name="testPeriod50_ClosingPrice" time="0.055"></testcase><testcase classname="testcases.technical_vwap_test.VWAPTestCase" name="testPeriod50_TypicalPrice" time="0.069"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testLong2" time="1.636"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testLong3" time="2.187"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testLongShort" time="1.474"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testLongShort2" time="1.637"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testNoTrades" time="1.473"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testProportionalCommissionBug" time="1.446"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testShort2" time="1.619"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testShort3" time="1.573"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testShortLong" time="1.893"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testShortLong2" time="1.637"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testSomeTrades" time="1.631"><system-err><![CDATA[C:\Anaconda2\lib\site-packages\numpy\core\_methods.py:82: RuntimeWarning: Degrees of freedom <= 0 for slice
  warnings.warn("Degrees of freedom <= 0 for slice", RuntimeWarning)
]]></system-err></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testSomeTradesWithCommissions" time="1.479"></testcase><testcase classname="testcases.trades_analyzer_test.TradesAnalyzerTestCase" name="testSomeTrades_Position" time="1.768"></testcase><testcase classname="testcases.twitter_test.TwitterFeedTestCase" name="testTwitterFeed" time="0.015"><failure type="exceptions.AssertionError" message="False is not true&#10;    'False is not true' = self._formatMessage('False is not true', &quot;%s is not true&quot; % safe_repr(False))&#10;&gt;&gt;  raise self.failureException('False is not true')&#10;    &#10;-------------------- &gt;&gt; begin captured logging &lt;&lt; --------------------&#10;twitter: INFO: Initializing client.&#10;requests_oauthlib.oauth1_auth: DEBUG: Signing request &lt;PreparedRequest [POST]&gt; using client &lt;Client nonce=None, signature_method=HMAC-SHA1, realm=None, encoding=utf-8, timestamp=None, resource_owner_secret=None, decoding=None, verifier=None, signature_type=AUTH_HEADER, rsa_key=None, resource_owner_key=None, client_secret=None, callback_uri=None, client_key=None&gt;&#10;requests_oauthlib.oauth1_auth: DEBUG: Including body in call to sign: True&#10;twitter: INFO: Client finished.&#10;--------------------- &gt;&gt; end captured logging &lt;&lt; ---------------------"><![CDATA[  File "C:\Anaconda2\lib\unittest\case.py", line 329, in run
    testMethod()
  File "C:\Users\charly\git\pyalgotrade\testcases\twitter_test.py", line 76, in testTwitterFeed
    self.assertTrue(events["on_tweet"])
  File "C:\Anaconda2\lib\unittest\case.py", line 422, in assertTrue
    raise self.failureException(msg)
'False is not true\n    \'False is not true\' = self._formatMessage(\'False is not true\', "%s is not true" % safe_repr(False))\n>>  raise self.failureException(\'False is not true\')\n    \n-------------------- >> begin captured logging << --------------------\ntwitter: INFO: Initializing client.\nrequests_oauthlib.oauth1_auth: DEBUG: Signing request <PreparedRequest [POST]> using client <Client nonce=None, signature_method=HMAC-SHA1, realm=None, encoding=utf-8, timestamp=None, resource_owner_secret=None, decoding=None, verifier=None, signature_type=AUTH_HEADER, rsa_key=None, resource_owner_key=None, client_secret=None, callback_uri=None, client_key=None>\nrequests_oauthlib.oauth1_auth: DEBUG: Including body in call to sign: True\ntwitter: INFO: Client finished.\n--------------------- >> end captured logging << ---------------------']]></failure><system-err><![CDATA[Exception in thread Thread-13:
Traceback (most recent call last):
  File "C:\Anaconda2\lib\threading.py", line 801, in __bootstrap_inner
    self.run()
  File "C:\Anaconda2\lib\threading.py", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File "C:\Users\charly\git\pyalgotrade\pyalgotrade\twitter\feed.py", line 110, in __threadMain
    self.__stream.filter(track=self.__track, follow=self.__follow, languages=self.__languages)
  File "C:\Anaconda2\lib\site-packages\tweepy\streaming.py", line 445, in filter
    self._start(async)
  File "C:\Anaconda2\lib\site-packages\tweepy\streaming.py", line 361, in _start
    self._run()
  File "C:\Anaconda2\lib\site-packages\tweepy\streaming.py", line 294, in _run
    raise exception
ValueError: Only unicode objects are escapable. Got None of type <type 'NoneType'>.

]]></system-err></testcase><testcase classname="testcases.utils_test.DateTimeTestCase" name="testGetFirstMonday" time="0.000"></testcase><testcase classname="testcases.utils_test.DateTimeTestCase" name="testGetLastMonday" time="0.001"></testcase><testcase classname="testcases.utils_test.DateTimeTestCase" name="testTimeStampConversions" time="0.000"></testcase><testcase classname="testcases.utils_test.DateTimeTestCase" name="testTimeStampConversionsWithMicroseconds" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testEmptyIntersection" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testFullIntersection" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testFullIntersectionWithDateTimes" time="0.005"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersection1" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersection2" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersection3" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersection4" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersection5" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersection6" time="0.001"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersectionIncludeNones" time="0.000"></testcase><testcase classname="testcases.utils_test.IntersectTestCase" name="testPartialIntersectionSkipNones" time="0.001"></testcase><testcase classname="testcases.utils_test.ListDequeTestCase" name="testBasicOps" time="0.000"></testcase><testcase classname="testcases.utils_test.ListDequeTestCase" name="testResize" time="0.000"></testcase><testcase classname="testcases.utils_test.ListDequeTestCase" name="testResizeEmpty" time="0.000"></testcase><testcase classname="testcases.utils_test.NumPyDequeTestCase" name="testBasicOps" time="0.000"></testcase><testcase classname="testcases.utils_test.NumPyDequeTestCase" name="testResize" time="0.000"></testcase><testcase classname="testcases.utils_test.NumPyDequeTestCase" name="testResizeEmpty" time="0.000"></testcase><testcase classname="testcases.utils_test.NumPyDequeTestCase" name="testSum" time="0.000"></testcase><testcase classname="testcases.utils_test.UtilsTestCase" name="testChangePercentage" time="0.007"></testcase><testcase classname="testcases.utils_test.UtilsTestCase" name="testSafeMax" time="0.001"></testcase><testcase classname="testcases.utils_test.UtilsTestCase" name="testSafeMin" time="0.000"></testcase><testcase classname="testcases.yahoo_test.ToolsTestCase" name="testBuildDailyFeed" time="0.153"></testcase><testcase classname="testcases.yahoo_test.ToolsTestCase" name="testBuildWeeklyFeed" time="0.086"></testcase><testcase classname="testcases.yahoo_test.ToolsTestCase" name="testDownloadAndParseDaily" time="0.118"></testcase><testcase classname="testcases.yahoo_test.ToolsTestCase" name="testDownloadAndParseWeekly" time="0.086"></testcase><testcase classname="testcases.yahoo_test.ToolsTestCase" name="testInvalidDates" time="0.228"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testBaseBarFeed" time="0.032"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testBaseFeedInterface" time="0.030"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testBounded" time="0.032"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testCSVFeedLoadOrder" time="0.057"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testDateCompare" time="0.000"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testDefaultInstrument" time="0.007"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testDuplicateBars" time="0.013"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testFilteredRangeFrom" time="0.034"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testFilteredRangeFromTo" time="0.031"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testFilteredRangeTo" time="0.032"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testInvalidConstruction" time="0.000"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testInvalidFrequency" time="0.000"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testMapTypeOperations" time="0.035"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testParseDate_1" time="0.001"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testParseDate_2" time="0.000"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testReset" time="0.053"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testWithDefaultTimezone" time="0.074"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testWithIntegerTimezone" time="0.000"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testWithPerFileTimezone" time="0.065"></testcase><testcase classname="testcases.yahoofeed_test.FeedTestCase" name="testWithoutTimezone" time="0.050"></testcase></testsuite>